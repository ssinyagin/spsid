# DO NOT EDIT THIS FILE
# All site-specific configuration should be stored in spsid_siteconfig.pl

if( defined($ENV{'SPSID_PERLLIBDIRS'}) ) {
    unshift(@INC, split(/,/, $ENV{'SPSID_PERLLIBDIRS'}));
}
else {
    unshift(@INC, split(/,/, @perllibdirs@));
}




$SPSID::Config::backend = 'SPSID::Server::Backend::SQL';




# Attribute properties:
#   mandatory => 1|0
#   unique => 1|0      [value globally unique]
#   unique_child => 1|0  [value unique within container]
#   descr => "description text"
#   hilite => 1|0
#   protected => 1|0
#   hidden => 1|0
#   dictionary => [list of possible values]
#   boolean => 1|0
#   insignificant => 1|0
#   default => "default value"
#   default_autogen => 1|0 [default value generated by server]
#   calculated => 1|0 [calculated automatically, implies protected]
#   templatemember => {keyattr => [keyval, ...], ...}
#   templatekey => 1|0
#   objref => "Classname"
#   reserved_refs => {attrval => 1, ...}
#   regexp => "validation regexp"
#   sync_ignore => 1|0 [if sync_contained_objects should ignore this attr]

# Class properties:
#   contained_in => {class => 1} [hash of parent classes]
#   single_instance => 1|0
#   root_object => 1|0
#   no_children => 1|0
#   delete_permanently => 1|0 [by default, deleted objects are not purged
#                              from the database, but only marked as deleted.
#                              This flag tells the server to delete the object
#                              forever]

# Class Display properties:
#   read_only => 1|0   [if the GUI user allowed to edit the objects]
#   class_descr => string  [descriptive term for the whole class]
#   instance_descr => string [descriptive term for a single object]
#   sequence => N  [sorting order for a list of classes]
#   name_attr => attrname [attribute which is used as a title for the object]
#   fullname_attr => attrname [attribute for a long title]
#   descr_attr => [attrname, ...] [additional attrs for object description]
#   tree_browser => 1|0 [if tree browser can be used for this class]



$SPSID::Config::class_attributes =
{
 'SIAM' =>
 {
  'single_instance' => 1,
  'root_object' => 1,
  'display' =>
  {
   'read_only' => 1,
  },
 },


 'SIAM::Contract' =>
 {
  'attr' =>
  {
   'siam.contract.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Contract number in the billing system',
   },
   'siam.contract.customer_name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Customer name',
   },
   'siam.contract.customer_id' =>
   {
    'mandatory' => 1,
    'descr' => 'Customer ID in the billing system',
   },
  },
  'contained_in' => {'SIAM' => 1},
  'display' =>
  {
   'class_descr' => 'Contracts',
   'instance_descr' => 'Contract',
   'sequence' => 110,
   'name_attr' => 'siam.contract.inventory_id',
   'descr_attr' => ['siam.contract.customer_name'],
   'fullsearch_attr' => ['siam.contract.inventory_id',
                         'siam.contract.customer_name'],
   'tree_browser' => 1,
  },
 },


 'SIAM::Service' =>
 {
  'attr' =>
  {
   'siam.svc.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Service ID in the billing system',
   },
   'siam.svc.type' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service type',
   },
   'siam.svc.product_name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service product name',
   },
  },
  'contained_in' => {'SIAM::Contract' => 1},
  'display' =>
  {
   'class_descr' => 'Services',
   'instance_descr' => 'Service',
   'sequence' => 120,
   'name_attr' => 'siam.svc.inventory_id',
   'descr_attr' => ['siam.svc.product_name'],
   'fullsearch_attr' => ['siam.svc.inventory_id'],
  },
 },


 'SIAM::ServiceUnit' =>
 {
  'attr' =>
  {
   'siam.svcunit.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Service Unit ID',
   },
   'siam.svcunit.type' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Unit type',
   },
   'siam.svcunit.name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Unit name',
   },
  },
  'contained_in' => {'SIAM::Service' => 1},
  'display' =>
  {
   'class_descr' => 'Service Units',
   'instance_descr' => 'Service Unit',
   'sequence' => 130,
   'name_attr' => 'siam.svcunit.name',
   'descr_attr' => [],
   'fullsearch_attr' => ['siam.svcunit.inventory_id',
                         'siam.svcunit.name'],
  },
 },

 
 'SIAM::ServiceComponent' =>
 {
  'attr' =>
  {
   'siam.svcc.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Service Component ID',
    'default_autogen' => 1,
    'protected' => 1,
   },
   'siam.svcc.type' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Component type',
    'templatekey' => 1,
    'dictionary' => ['IFMIB.Port', 'Power.PDU'],
   },
   'siam.svcc.name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Component name',
    'default_autogen' => 1,
   },
   'siam.svcc.devc_id' =>
   {
    'mandatory' => 1,
    'objref' =>  'SIAM::DeviceComponent',
    'descr' => 'Associated device component',
   },
   'siam.svcc.devc_description' =>
   {
    'calculated' => 1,
    'protected' => 1,
    'descr' => 'Description of associated device component',
   },
  },
  'contained_in' => {'SIAM::ServiceUnit' => 1},
  'no_children' => 1,
  'display' =>
  {
   'class_descr' => 'Service Components',
   'instance_descr' => 'Service Component',
   'sequence' => 140,
   'name_attr' => 'siam.svcc.name',
   'descr_attr' => ['siam.svcc.devc_description'],
   'fullsearch_attr' => ['siam.svcc.inventory_id',
                         'siam.svcc.name',
                         'siam.svcc.devc_description'],
  },
 },


 'SIAM::Device' =>
 {
  'attr' =>
  {
   'siam.device.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Device ID',
   },
   'siam.device.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'hilite' => 1,
    'descr' => => 'Device name',
   },
   'torrus.server' =>
   {
    'descr' => 'Name of a Torrus server',
   },
   'torrus.tree' =>
   {
    'descr' => 'Torrus tree name',
    'default' => 't01',
   },
   'torrus.tree-url' =>
   {
    'descr' => 'Torrus URL',
   },
   'snmp.managed' =>
   {
    'descr' => 'Check if the device is monitored via SNMP',
    'default' => '1',
    'boolean' => 1,
   },
   'snmp.host' =>
   {
    'descr' => 'DNS name or IP address for the device',
    'regexp' => '^[a-zA-Z0-9][a-zA-Z0-9-.]+[a-zA-Z0-9]$',
   },
   'snmp.version' =>
   {
    'descr' => 'SNMP version supported by device',
    'default' => '2c',
    'dictionary' => ['1', '2c'],
    'insignificant' => 1,
   },
   'snmp.community' =>
   {
    'descr' => 'SNMP community',
    'default' => 'public',
    'insignificant' => 1,
   },
   'snmp.timeout' =>
   {
    'descr' => 'SNMP request timeout, seconds',
    'default' => '3',
    'insignificant' => 1,
    'regexp' => '^[0-9]+$',
   },
   'snmp.retries' =>
   {
    'descr' => 'Number of SNMP request retries',
    'default' => '2',
    'insignificant' => 1,
    'regexp' => '^[0-9]+$',
   },
   'torrus.subtree_path' =>
   {
    'descr' => 'Subtree name for the device in Torrus',
    'insignificant' => 1,
   },
   'torrus.imported' =>
   {
    'descr' => 'Status of Torrus discovery',
    'protected' => 1,
    'sync_ignore' => 1,
   },
  },
  'contained_in' => {'SIAM' => 1},
  'display' =>
  {
   'class_descr' => 'Devices',
   'instance_descr' => 'Device',
   'sequence' => 150,
   'name_attr' => 'siam.device.name',
   'descr_attr' => [],
   'tree_browser' => 1,
   'fullsearch_attr' => ['siam.device.inventory_id',
                         'siam.device.name',
                         'snmp.host'],
  },
 },

 'SIAM::DeviceComponent' =>
 {
  'attr' =>
  {
   'siam.devc.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Device Component ID',
    'default_autogen' => 1,
    'protected' => 1,
   },
   'siam.devc.type' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Device Component type',
    'templatekey' => 1,
    'dictionary' => ['IFMIB.Port', 'Power.PDU'],
   },
   'siam.devc.name' =>
   {
    'mandatory' => 1,
    'unique_child' => 1,
    'hilite' => 1,
    'descr' => 'Device Component name',
   },
   'siam.devc.full_name' =>
   {
    'calculated' => 1,
    'protected' => 1,
    'descr' => 'Full name of the Device Component',
   },
   'siam.devc.description' =>
   {
    'protected' => 1,
    'descr' => 'Device Component description',
   },
   'torrus.nodeid' =>
   {
    'calculated' => 1,
    'protected' => 1,
    'descr' => 'Unique Torrus NodeID value',
   },
   'torrus.port.bandwidth' =>
   {
    'templatemember' => {'siam.devc.type' => ['IFMIB.Port']},
    'descr' => 'Service bandwidth in bit per second',
    'regexp' => '^[0-9]+$',
   },
   'torrus.imported' =>
   {
    'descr' => 'Status of Torrus discovery',
    'protected' => 1,
    'sync_ignore' => 1,
   },
   'torrus.warning' =>
   {
    'descr' => 'Warning during Torrus discovery',
    'protected' => 1,
    'sync_ignore' => 1,
   },
   'display.sort.string' =>
   {
    'protected' => 1,
    'hidden' => 1,    
   }
  },
  'contained_in' => {'SIAM::Device' => 1},
  'no_children' => 1,
  'delete_permanently' => 1,
  'display' =>
  {
   'class_descr' => 'Device Components',
   'instance_descr' => 'Device Component',
   'sequence' => 160,
   'name_attr' => 'siam.devc.name',
   'fullname_attr' => 'siam.devc.full_name',
   'descr_attr' => ['siam.devc.description'],
   'display.sort.string' => 'display.sort.string',
   'fullsearch_attr' => ['siam.devc.inventory_id',
                         'siam.devc.full_name',
                         'siam.devc.description'],
  },
 },
 
 'SIAM::AccessScope' =>
 {
  'attr' =>
  {
   'siam.scope.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
   'siam.scope.applies_to' =>
   {
    'mandatory' => 1,
   },
  },
  'contained_in' => {'SIAM' => 1},
 },
 

 'SIAM::ScopeMember' =>
 {
  'attr' =>
  {
   'siam.scmember.object_id' =>
   {
    'mandatory' => 1,
    'objref' => '*',
   },
  },
  'contained_in' => {'SIAM::AccessScope' => 1},
  'no_children' => 1,
 },

 
 'SIAM::User' =>
 {
  'attr' =>
  {
   'siam.user.uid' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
  },
  'contained_in' => {'SIAM' => 1},
 },


 'SIAM::Privilege' =>
 {
  'attr' =>
  {
   'siam.privilege.access_scope_id' =>
   {
    'mandatory' => 1,
    'objref' => 'SIAM::AccessScope',
    'reserved_refs' =>
    {
     'SIAM.SCOPE.ALL.CONTRACTS' => 1,
     'SIAM.SCOPE.ALL.ATTRIBUTES' => 1,
    },
   },
   'siam.privilege.type' =>
   {
    'mandatory' => 1,
   },
  },
  'contained_in' => {'SIAM::User' => 1},
  'no_children' => 1,
 },


 'SIAM::Attribute' =>
 {
  'attr' =>
  {
   'siam.attribute.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
  },
  'contained_in' => {'SIAM' => 1},
  'no_children' => 1,
 },


 'SIAM::Report' =>
 {
  'attr' =>
  {
   'siam.report.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
   'siam.report.description' => 
   {
    'mandatory' => 1,
   },
   'siam.report.object_class' => 
   {
    'mandatory' => 1,
   },
   'siam.report.type' => 
   {
    'mandatory' => 1,
   },
   'siam.report.last_updated' => 
   {
    'mandatory' => 1,
   },
  },
 },
};


foreach my $objclass (keys %{$SPSID::Config::class_attributes}) {

    if( $objclass =~ /^SIAM/o ) {
        my $ref = $SPSID::Config::class_attributes->{$objclass};
        $ref->{'attr'}{'siam.object.complete'} =
        {
         'mandatory' => 1,
         'default' => '1',
         'boolean' => 1,
         'descr' => 'true if object is ready',
        }
    }
}


$SPSID::Config::new_service_component_seq_realm = 'SPSID';
$SPSID::Config::new_device_component_seq_realm = 'SPSID';


$SPSID::Config::new_obj_generators =
{
 'SIAM::ServiceComponent' =>
 {
  'default' => sub {
      my $self = shift;
      my $attr = shift;

      my $realm = $SPSID::Config::new_service_component_seq_realm;
      my $id = $self->sequence_next($realm);
      my $idstr = sprintf('%s%.6d', $realm, $id);

      $attr->{'siam.svcc.inventory_id'} = $idstr;
      $attr->{'siam.svcc.name'} = $idstr;
  },
 },
 'SIAM::DeviceComponent' =>
 {
  'default' => sub {
      my $self = shift;
      my $attr = shift;

      my $realm = $SPSID::Config::new_device_component_seq_realm;
      my $id = $self->sequence_next($realm);
      my $idstr = sprintf('%s%.6d', $realm, $id);

      $attr->{'siam.devc.inventory_id'} = $idstr;
  },
 },};


{
    my $calc_attr_prop =
    {
     'IFMIB.Port' => {'attr' => 'torrus.nodeid',
                      'prefix' => 'spsid-port//'},
     'Power.PDU' => {'attr' => 'torrus.nodeid',
                     'prefix' => 'spsid-pdu//'},
    };
    
    $SPSID::Config::calc_attr_generators =
    {
     'SIAM::DeviceComponent' =>
     {
      'default' => sub {
          my $self = shift;
          my $attr = shift;

          my $type = $attr->{'siam.devc.type'};
          my $calc_attr = $calc_attr_prop->{$type}{'attr'};
          my $prefix = $calc_attr_prop->{$type}{'prefix'};
          $attr->{$calc_attr} = $prefix . $attr->{'siam.devc.inventory_id'};

          my $dev = $self->get_object($attr->{'spsid.object.container'});
          $attr->{'siam.devc.full_name'} =
              $dev->{'siam.device.name'} . ' ' . $attr->{'siam.devc.name'};

          return {$calc_attr => 1, 'siam.devc.description' => 1};
      },
     },

     'SIAM::ServiceComponent' =>
     {
      'default' => sub {
          my $self = shift;
          my $attr = shift;

          my $devc_descr = '';

          if( $attr->{'siam.svcc.devc_id'} ne 'NIL' ) {
              my $devc = $self->get_object($attr->{'siam.svcc.devc_id'});
              $devc_descr = $devc->{'siam.devc.full_name'};
          }

          $attr->{'siam.svcc.devc_description'} = $devc_descr;
          return {'siam.svcc.devc_description' => 1};
      },
     },
    };
}


$SPSID::Plugin::rpc = {};

# Read plugin configurations
{
    my $dir;
    if( defined($ENV{'SPSID_PLUGCONFDIR'}) ) {
        $dir = $ENV{'SPSID_PLUGCONFDIR'};
    } else {
        $dir = '@plugconfdir@';
    }
    opendir(CFGDIR, $dir) or die("Cannot open directory $dir: $!");
    my @files = grep { /_spsid_config\.pl$/ } readdir(CFGDIR);
    closedir( CFGDIR );
    foreach my $file ( @files )
    {
        do $dir . '/' . $file;
        die($@) if $@;
    }
}



{
    my $siteconf;
    if( defined($ENV{'SPSID_SITECONFIG'}) ) {
        $siteconf=$ENV{'SPSID_SITECONFIG'};
    }
    else {
        $siteconf = '@siteconfdir@/spsid_siteconfig.pl';
    }
    
    do $siteconf;
    die("Error reading $siteconf: $@") if $@;
}



1;


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
